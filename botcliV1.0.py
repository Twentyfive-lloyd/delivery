import telebot
from telebot import types
import psycopg2
import os
import pyzbar.pyzbar as pyzbar
from PIL import Image
import io
import random
import requests
from telebot.apihelper import ApiException
import datetime
from telegram import ReplyKeyboardRemove
import threading
import time 
# Token d'API de ton bot
TOKEN = '6082635856:AAHSf33r9e9r3bZIEiiRCJ_ZseqTlfQjzMg'
VOTRE_CINETPAY_API_KEY = '63102016562bb6111a2b101.28388740'

# Connexion √† la base de donn√©es PostgreSQL
conn = psycopg2.connect(
    host="127.0.0.1",
    port="5432",
    database="best_seller",
    user="postgres",
    password="1234"
)

# Cr√©e l'instance du bot
bot = telebot.TeleBot(TOKEN)

# Dictionnaire pour stocker le panier de chaque utilisateur
user_carts = {}


# G√®re la commande /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    # Cr√©e les boutons pour les fonctionnalit√©s
    markup = types.ReplyKeyboardMarkup(row_width=2)
    
    btn_acheter = types.KeyboardButton("Acheter üõçÔ∏è")
    btn_scanner_qr = types.KeyboardButton("Scanner QR code üì∑")
    btn_panier = types.KeyboardButton("üõí Voir Panier")
    #btn_livraisons = types.KeyboardButton("Voir Livraisons üöö")
    btn_contact = types.KeyboardButton("Contactez-nous ‚òéÔ∏è")
    btn_quitter = types.KeyboardButton("Quitter ‚ùå")
    btn_enregistrer = types.KeyboardButton("Enregistrer les informations üíæ")
    
    markup.add(btn_acheter, btn_scanner_qr, btn_panier,  btn_contact, btn_quitter, btn_enregistrer)
    
    # Envoie le message de bienvenue avec les boutons
    bot.reply_to(message, "Bienvenue sur notre bot de commerce √©lectronique ! Que voulez-vous faire aujourd'hui ?", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.startswith("Quitter"))
def handle_quitter(message):
    user_id = message.from_user.id

    # Supprime le panier de l'utilisateur
    clear_cart(user_id)

    # Masque le menu des cat√©gories
    markup = types.ReplyKeyboardRemove()

    # Affiche le message d'au revoir
    bot.reply_to(message, "Au revoir ! Pour commencer, appuyez sur /start.", reply_markup=markup)

# G√®re l'action du bouton "/enregistrer_informations"

def handle_enregistrer_informations(message):
    client_id = message.chat.id  # ID du client (ID du chat)
    bot.reply_to(message, "Veuillez saisir votre nom :")
    bot.register_next_step_handler(message, process_name, client_id)


# Variables globales pour stocker les informations du client
temp_name = None
temp_prenom = None
temp_adresse = None
temp_client_id = None
temp_email = None

# Fonction de traitement du nom
def process_name(message, client_id):
    global temp_name
    temp_name = message.text
    bot.reply_to(message, "Veuillez saisir votre pr√©nom :")
    bot.register_next_step_handler(message, process_prenom)


# Fonction de traitement du pr√©nom
def process_prenom(message):
    global temp_prenom
    temp_prenom = message.text
    bot.reply_to(message, "Veuillez saisir votre adresse :")
    bot.register_next_step_handler(message, process_adresse)

# Fonction de traitement de l'adresse
def process_adresse(message):
    global temp_adresse
    temp_adresse = message.text
    bot.reply_to(message, "Veuillez saisir votre email :")
    bot.register_next_step_handler(message, process_email)

def process_email(message):
    global temp_email
    temp_email = message.text
    bot.reply_to(message, "Veuillez saisir votre t√©l√©phone :")
    bot.register_next_step_handler(message, process_telephone)

# Fonction de traitement du t√©l√©phone
def process_telephone(message):
    global temp_client_id
    telephone = message.text
    # Assurez-vous que client_id est un entier
    client_id = message.chat.id
    try:
        cursor = conn.cursor()

        # V√©rifier si l'utilisateur existe d√©j√†
        check_query = "SELECT * FROM clients WHERE client_id = %s"
        cursor.execute(check_query, (client_id,))
        existing_user = cursor.fetchone()

        if existing_user:
            # Utiliser la requ√™te UPDATE pour mettre √† jour les informations
            update_query = "UPDATE clients SET nom = %s, prenom = %s, adresse = %s, telephone = %s, email = %s WHERE client_id = %s"
            update_values = (temp_name, temp_prenom, temp_adresse, telephone, temp_email, client_id)
            cursor.execute(update_query, update_values)
        else:
            # Utiliser la requ√™te INSERT INTO pour ins√©rer de nouvelles informations
            insert_query = "INSERT INTO clients (client_id, nom, prenom, adresse, telephone, email) VALUES (%s, %s, %s, %s, %s, %s)"
            insert_values = (client_id, temp_name, temp_prenom, temp_adresse, telephone, temp_email)
            cursor.execute(insert_query, insert_values)

        conn.commit()
        cursor.close()
        bot.reply_to(message, "Informations enregistr√©es avec succ√®s !")
    except (Exception, psycopg2.Error) as error:
        bot.reply_to(message, "Une erreur s'est produite lors de l'enregistrement des informations.")



# G√®re les messages textuels
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    if message.text.startswith('/add'):
        product_name = message
        user_id = message.from_user.id
        if product_name:
            add_product_to_cart(user_id, product_name)
            bot.reply_to(message, f"Produit {product_name} ajout√© au panier avec succ√®s.")
        else:
            bot.reply_to(message, "Veuillez sp√©cifier le nom du produit √† ajouter au panier.")
    elif message.text == "üõí Voir Panier":
        handle_voir_panier(message)
    elif message.text.startswith("Acheter"):
        handle_acheter(message)
    elif message.text in get_categories():
        category = message.text
        # R√©cup√®re les produits de la cat√©gorie s√©lectionn√©e depuis la base de donn√©es
        products = get_products_by_category(category)
        markup = None
        # Traite les donn√©es des produits comme tu le souhaites
        sent_products = []  # Liste pour stocker les produits d√©j√† envoy√©s

        for product in products:
            product_name = product[0]
            response = f"Nom : {product_name}\nDescription : {product[1]}\nPrix : {product[2]} FCFA\n"
            images = get_product_images(product_name)

            if images:
                media_group = []
                for image_path in images:
                    with open(image_path, 'rb') as photo:
                        file_data = photo.read()
                        media = types.InputMediaPhoto(media=file_data)
                        media_group.append(media)

                # Envoyer le carrousel d'images
                bot.send_media_group(message.chat.id, media_group)

            # Envoyer le message du produit uniquement s'il n'a pas √©t√© d√©j√† envoy√©
            if product_name not in sent_products:
                if images:
                    # Ajouter le bouton "Ajouter au panier"
                    btn_add_to_cart = types.InlineKeyboardButton("Ajouter au panier", callback_data=f"add_to_cart {product_name}")
                    markup = types.InlineKeyboardMarkup().add(btn_add_to_cart)
                    bot.send_message(message.chat.id, text=response, reply_markup=markup)
                else:
                    # Envoyer le message sans les images mais avec le bouton "Ajouter au panier"
                    btn_add_to_cart = types.InlineKeyboardButton("Ajouter au panier", callback_data=f"add_to_cart {product_name}")
                    markup = types.InlineKeyboardMarkup().add(btn_add_to_cart)
                    bot.send_message(message.chat.id, text=response, reply_markup=markup)

            sent_products.append(product_name)  # Ajouter le produit √† la liste des produits envoy√©s
    elif message.text.startswith("Scanner QR code"):
        handle_scanner_qrcode(message)
    elif message.text.startswith("Contactez-nous"):
        handle_contactez_nous(message)
    elif message.text.startswith("Enregistrer les informations"):
        handle_enregistrer_informations(message)
    else:
        # R√©pondre en cas de message non reconnu
        bot.reply_to(message, 'Je ne comprends pas votre demande.')


@bot.callback_query_handler(func=lambda call: call.data.startswith('add_to_cart'))
def handle_add_to_cart(call):
    user_id = call.from_user.id
    callback_data = call.data.split()
    product_name = " ".join(callback_data[1:])
    add_product_to_cart(user_id, product_name)
    bot.answer_callback_query(call.id, f"Produit {product_name} ajout√© au panier.")




@bot.callback_query_handler(func=lambda call: call.data == 'confirm_payment')
def handle_confirm_payment(call):
    # Message simplifi√© sur le processus de paiement s√©curis√©
    payment_message = (
        "Merci pour votre paiement! En cliquant sur le bouton ci-dessous, vous serez redirig√© "
        "vers une page web s√©curis√©e pour finaliser votre paiement en toute s√©curit√©.\n\n"
        "Appuyez sur 'Confirmer le paiement' pour continuer."
    )

    # Cr√©ation du bouton
    btn_mobile = types.InlineKeyboardButton("Confirmer le paiement", callback_data="payment_mobile")
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(btn_mobile)

    # Envoie du message avec le bouton
    bot.send_message(call.from_user.id, payment_message, reply_markup=markup)






def calculate_total_amount(user_id):
    cart_content = get_cart_content(user_id)
    total_amount = 0

    for product_name, quantity in cart_content.items():
        price = get_product_price(product_name)
        if price is not None:
            total_amount += price * quantity

    return total_amount

def get_client_info(client_id):
    try:  
        cursor = conn.cursor()
        query = "SELECT nom, prenom, email FROM clients WHERE client_id = %s"
        cursor.execute(query, (client_id,))
        client_info = cursor.fetchone()
        
        if client_info:
            return {
                "nom": client_info[0],
                "prenom": client_info[1],
                "email": client_info[2]
            }
        else:
            return None
    except (psycopg2.Error, Exception) as error:
        print("Erreur lors de la r√©cup√©ration des informations du client :", error)
        return None
    finally:
        if conn:
            conn.close()


def generate_cinetpay_payment_link(montant_depot, transaction_id, client_id):
    # R√©cup√®re les informations du client depuis la base de donn√©es en utilisant le client_id
    client_info = get_client_info(client_id)  # √Ä impl√©menter selon ta structure de base de donn√©es
    
    if client_info is None:
        print("Impossible de r√©cup√©rer les informations du client depuis la base de donn√©es.")
        return None
    
    numero_destinataire = "656958696"  # Num√©ro de t√©l√©phone de destination
    api_url = "https://api-checkout.cinetpay.com/v2/payment"
    amount = int(montant_depot)
    
    # Utilise les informations du client pour remplir les param√®tres de la requ√™te
    query_params = {
        "amount": amount,
        "currency": "XAF",
        "description": "Paiement de facture",
        "customer_name": client_info["nom"],  # Remplace avec le nom du client depuis la base de donn√©es
        "customer_surname": client_info["prenom"],  # Remplace avec le pr√©nom du client depuis la base de donn√©es
        "customer_phone_number": numero_destinataire,
        "customer_email": client_info["email"],  # Remplace avec l'adresse email du client depuis la base de donn√©es
        "return_url": "https://t.me/BEST_SELLER_UPbot",
        "notify_url": "https://t.me/BEST_SELLER_UPbot",
        "site_id": "607207",  # Remplace par l'identifiant de votre site CinetPay
        "transaction_id": transaction_id  # Remplace par un identifiant unique pour chaque transaction
    }
    
    # Ajoute la cl√© API aux param√®tres de l'URL
    query_params["apikey"] = VOTRE_CINETPAY_API_KEY
    
    response = requests.post(api_url, params=query_params)
    
    if response.status_code == 200:  # Utilisez le code 201 pour indiquer "CREATED"
        data = response.json()
        if "data" in data and "payment_url" in data["data"]:
            return data["data"]["payment_url"]  # Retourne le lien de paiement
    else:
        print("Erreur lors de la g√©n√©ration du lien de paiement :", response.text, response.status_code)
        return None



def save_invoice(facture_id, client_id, date_facture, montant, lieu_livraison, livre):
    try:
        # Cr√©ation d'un curseur pour ex√©cuter les requ√™tes SQL
        cursor = conn.cursor()
        site_id = 607207
        # V√©rifier l'√©tat de la transaction avec CinetPay
        result = verify_cinetpay_transaction(facture_id, site_id, VOTRE_CINETPAY_API_KEY)

        if result is not None and result["status"] == "ACCEPTED":
            # La transaction est r√©ussie, enregistrer la facture dans la base de donn√©es
            insert_query = """
                INSERT INTO factures (facture_id, client_id, date_facture, montant, lieu_livraison, livre)
                VALUES (%s, %s, %s, %s, %s, %s)
            """
            data = (facture_id, client_id, date_facture, montant, lieu_livraison, livre)

            cursor.execute(insert_query, data)
            conn.commit()
            print("La facture a √©t√© enregistr√©e avec succ√®s dans la base de donn√©es.")
        else:
            # La transaction n'est pas r√©ussie, demander √† l'utilisateur de v√©rifier le paiement
            print("La transaction n'a pas √©t√© r√©ussie. Veuillez v√©rifier votre paiement.")

    except (psycopg2.Error, Exception) as error:
        # G√©rer les erreurs li√©es √† la base de donn√©es
        print("Erreur lors de l'enregistrement de la facture :", error)

    finally:
        # Fermer le curseur et la connexion √† la base de donn√©es, m√™me en cas d'exception
        if cursor is not None:
            cursor.close()
        if conn is not None:
            conn.close()


# Dictionnaire pour stocker les informations de paiement en cours
payment_info = {}

# Dictionnaire pour stocker les comptes √† rebours
countdown_timers = {}

def start_countdown(user_id):
    remaining_time = 120
    while remaining_time >= 0:
        if payment_info[user_id]["verified"]:
            return
        if remaining_time % 60 == 0:
            bot.send_message(user_id, f"Temps restant : {remaining_time // 60} minutes")
        time.sleep(1)
        remaining_time -= 1
    bot.send_message(user_id, "Transaction annul√©e : Veuillez v√©rifier votre paiement ou r√©essayer.")
    payment_info.pop(user_id, None)
    countdown_timers.pop(user_id, None)

def verify_payment_periodically(user_id):
    site_id = 607207
    time.sleep(60)  # Attendre 1 minute avant la premi√®re v√©rification
    while not payment_info[user_id]["verified"]:
        if verify_cinetpay_transaction(payment_info[user_id]["id_recu"], site_id, VOTRE_CINETPAY_API_KEY, payment_info[user_id]["amount"]):
            payment_info[user_id]["verified"] = True
            # Enregistrer la facture dans la base de donn√©es si la transaction est r√©ussie
            current_datetime = datetime.datetime.now().strftime("%Y-%m-%d")
            delivery_address = get_user_address(user_id)
            bools = False
            save_invoice(payment_info[user_id]["id_recu"], user_id, current_datetime, payment_info[user_id]["amount"], delivery_address, bools)
            bot.send_message(user_id, "Transaction r√©ussie : La facture a √©t√© enregistr√©e.")
        else:
            bot.send_message(user_id, "Veuillez v√©rifier votre paiement.")
            time.sleep(60)  # Attendre 1 minute avant la prochaine v√©rification


    
@bot.callback_query_handler(func=lambda call: call.data == 'start_countdown')
def start_countdown_callback(call):
    user_id = call.from_user.id
    
    if user_id not in countdown_timers and user_id in payment_info and not payment_info[user_id]["verified"]:
        # D√©marrer le compte √† rebours de 2 minutes et la v√©rification p√©riodique dans des threads distincts
        countdown_thread = threading.Thread(target=start_countdown, args=(user_id,))
        countdown_thread.start()
        countdown_timers[user_id] = countdown_thread

        verification_thread = threading.Thread(target=verify_payment_periodically, args=(user_id,))
        verification_thread.start()
        
        # Cr√©er un bouton annuler
        cancel_button = types.InlineKeyboardButton("Annuler", callback_data="cancel")
        cancel_keyboard = types.InlineKeyboardMarkup()
        cancel_keyboard.row(cancel_button)
        bot.send_message(user_id, "Le compte √† rebours a commenc√©. Cliquez sur le bouton 'Annuler' pour arr√™ter la transaction.", reply_markup=cancel_keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def cancel_transaction_callback(call):
    user_id = call.from_user.id
    if payment_info.get(user_id):
        payment_info.pop(user_id, None)
        if user_id in countdown_timers:
            countdown_timers[user_id].join()  # Attendre que le compte √† rebours se termine
            countdown_timers.pop(user_id, None)
        bot.send_message(user_id, "Transaction annul√©e : Vous avez annul√© la transaction en cours.")

def start_countdown(user_id):
    # D√©marrez le compte √† rebours de 2 minutes
    countdown_duration = 120  # 2 minutes en secondes
    end_time = time.time() + countdown_duration
    
    while time.time() < end_time:
        remaining_time = int(end_time - time.time())
        bot.send_message(user_id, f"Temps restant : {remaining_time} secondes")
        time.sleep(10)  # Attendez 10 secondes avant de mettre √† jour le message

    bot.send_message(user_id, "Le compte √† rebours est termin√©.")


@bot.callback_query_handler(func=lambda call: call.data == 'payment_mobile')
def process_mobile_payment(call):
    user_id = call.from_user.id

    amount = calculate_total_amount(user_id)
    amount = amount + 1000
    id_recu = random.randint(100000, 999999)

    payment_info[user_id] = {
        "amount": amount,
        "id_recu": id_recu,
        "payment_url": generate_cinetpay_payment_link(amount, id_recu, user_id),
        "verified": False
    }

    bot.send_message(user_id, f"Vous allez payer {amount} pour le re√ßu {id_recu}.")

    payment_button = types.InlineKeyboardButton("Cliquez ici pour effectuer le paiement", url=payment_info[user_id]["payment_url"])
    payment_keyboard = types.InlineKeyboardMarkup()
    payment_keyboard.row(payment_button)

    message = bot.send_message(user_id, "Veuillez cliquer sur le lien suivant pour effectuer le paiement :", reply_markup=payment_keyboard)
    
    countdown_thread = threading.Thread(target=start_countdown, args=(user_id,))
    countdown_thread.start()
    countdown_timers[user_id] = countdown_thread
    
    # Store the transaction ID in the payment_info dictionary
    payment_info[user_id]["transaction_id"] = id_recu  # Replace this with your actual logic to get the transaction ID
    
    verification_thread = threading.Thread(target=verify_payment_periodically, args=(user_id,))
    verification_thread.start()
    
    # Send the payment link as a message
    bot.send_message(user_id, f"Voici le lien de paiement : {payment_info[user_id]['payment_url']}")

# ...


@bot.message_handler(func=lambda message: message.text == "Annuler")
def cancel_transaction(message):
    user_id = message.from_user.id
    if payment_info.get(user_id):
        payment_info.pop(user_id, None)
        if user_id in countdown_timers:
            countdown_timers[user_id].join()  # Attendre que le compte √† rebours se termine
            countdown_timers.pop(user_id, None)
        bot.send_message(user_id, "Transaction annul√©e : Vous avez annul√© la transaction en cours.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('pay'))
def handle_payment(call):
    # R√©cup√®re le mode de paiement s√©lectionn√©
    #payment_method = call.data.split('_')[1]

    # Affiche un message avec le mode de paiement s√©lectionn√©
    #bot.send_message(call.from_user.id, f"Vous avez s√©lectionn√© le mode de paiement : {payment_method}")

    # Cr√©e les boutons pour les options de r√©cup√©ration
    btn_delivery = types.InlineKeyboardButton("Se faire livrer", callback_data="delivery")
    btn_pickup = types.InlineKeyboardButton("R√©cup√©rer", callback_data="pickup")
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(btn_delivery, btn_pickup)

    # Envoie le message avec les options de r√©cup√©ration
    bot.send_message(call.from_user.id, "Comment souhaitez-vous r√©cup√©rer votre produit :", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'delivery')
def handle_delivery(call):
    user_id = call.from_user.id
    address = get_user_address(user_id)

    if address:
        # Si le client a d√©j√† une adresse enregistr√©e, demande de confirmation
        confirm_delivery_address(call.from_user.id, address)
    else:
        # Si le client n'a pas d'adresse enregistr√©e, demande d'entrer une adresse
        bot.send_message(call.from_user.id, "Veuillez entrer votre adresse de livraison :")
        bot.register_next_step_handler(call.message, process_delivery_address)

@bot.callback_query_handler(func=lambda call: call.data == 'pickup')
def handle_pickup(call):
    user_id = call.from_user.id
    pickup_address = get_user_address(user_id)

    if pickup_address:
        # Si l'adresse de r√©cup√©ration existe, demande de confirmation
        confirm_pickup_address(user_id, pickup_address)
    else:
        # Si l'adresse de r√©cup√©ration n'est pas disponible, envoie un message d'erreur
        bot.send_message(user_id, "L'adresse de r√©cup√©ration n'est pas disponible pour le moment.")
        bot.register_next_step_handler(call.message, process_delivery_address)
        # Vous pouvez √©galement proposer d'autres options ou demander des informations suppl√©mentaires

def get_user_address(user_id):
    try:
        cursor = conn.cursor()
        query = "SELECT adresse FROM clients WHERE client_id = %s"
        cursor.execute(query, (user_id,))
        result = cursor.fetchone()
        cursor.close()

        if result:
            return result[0]  # Retourne l'adresse du client
        else:
            return None  # Aucune adresse trouv√©e pour ce client

    except (Exception, psycopg2.Error) as error:
        print("Erreur lors de la r√©cup√©ration de l'adresse du client :", error)
        return None


def confirm_pickup_address(user_id, address):
    # Cr√©e les boutons de confirmation d'adresse
    btn_confirm = types.InlineKeyboardButton("Confirmer", callback_data="confirm_pickup")
    btn_change = types.InlineKeyboardButton("Changer", callback_data="change_address")
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(btn_confirm, btn_change)

    # Envoie le message avec l'adresse et les boutons de confirmation
    bot.send_message(user_id, f"Votre adresse de retrait :\n\n{address}\n\nConfirmez-vous cette adresse ?", reply_markup=markup)

def confirm_delivery_address(user_id, address):
    # Cr√©e les boutons de confirmation d'adresse
    btn_confirm = types.InlineKeyboardButton("Confirmer", callback_data="confirm_address")
    btn_change = types.InlineKeyboardButton("Changer", callback_data="change_address")
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(btn_confirm, btn_change)

    # Envoie le message avec l'adresse et les boutons de confirmation
    bot.send_message(user_id, f"Votre adresse de livraison :\n\n{address}\n\nConfirmez-vous cette adresse ?", reply_markup=markup)

def process_delivery_address(message):
    user_id = message.from_user.id
    delivery_address = message.text

    # V√©rifie si l'adresse de livraison est valide (vous pouvez ajouter vos crit√®res de validation ici)
    if len(delivery_address) > 1:
        # L'adresse de livraison est valide, on peut l'utiliser
        update_user_address(user_id, delivery_address)
        bot.send_message(user_id, "Votre adresse de livraison a √©t√© enregistr√©e avec succ√®s.")
    else:
        bot.send_message(user_id, "Adresse de livraison invalide. Veuillez entrer une adresse valide.")



def update_user_address(user_id, address):
    try:
        cursor = conn.cursor()
        query = "UPDATE clients SET adresse = %s WHERE client_id = %s"
        values = (address, user_id)
        cursor.execute(query, values)
        conn.commit()
        cursor.close()
    except (Exception, psycopg2.Error) as error:
        print("Erreur lors de la mise √† jour de l'adresse du client :", error)


@bot.callback_query_handler(func=lambda call: call.data == 'confirm_address')
def handle_confirm_address(call):
    user_id = call.from_user.id
    
    # R√©cup√©rer la date et l'heure actuelle
    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # R√©cup√©rer le montant total du panier
    total_amount = calculate_total_amount(user_id)
    
    # R√©cup√©rer l'adresse de livraison confirm√©e
    delivery_address = get_user_address(user_id)
    
    # Calculer le montant total du re√ßu
    receipt_amount = total_amount + 1000

    # Construire le message de r√©ception
    receipt_message = f"Voici votre re√ßu :\n\n"
    receipt_message += f"Date et heure : {current_datetime}\n"
    receipt_message += f"Montant total du panier : {total_amount} FCFA\n"
    receipt_message += f"Adresse de livraison : {delivery_address}\n"
    receipt_message += f"Montant total du re√ßu : {receipt_amount} FCFA\n\n"
    
    # Cr√©er le bouton de confirmation de paiement
    btn_confirm_payment = types.InlineKeyboardButton("Confirmer le paiement", callback_data="confirm_payment")
    markup = types.InlineKeyboardMarkup().add(btn_confirm_payment)
    
    # Envoyer le message de r√©ception avec le bouton de confirmation de paiement
    bot.send_message(user_id, receipt_message, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'confirm_pickup')
def handle_confirm_pickup(call):
    user_id = call.from_user.id
    
    # R√©cup√©rer la date et l'heure actuelle
    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # R√©cup√©rer le montant total du panier
    total_amount = calculate_total_amount(user_id)
    
    # R√©cup√©rer l'adresse de livraison confirm√©e
    delivery_address = get_user_address(user_id)
    
    # Calculer le montant total du re√ßu
    receipt_amount = total_amount

    # Construire le message de r√©ception
    receipt_message = f"Voici votre re√ßu :\n\n"
    receipt_message += f"Date et heure : {current_datetime}\n"
    receipt_message += f"Montant total du panier : {total_amount} FCFA\n"
    receipt_message += f"Adresse de livraison : {delivery_address}\n"
    receipt_message += f"Montant total du re√ßu : {receipt_amount} FCFA\n\n"
    
    # Cr√©er le bouton de confirmation de paiement
    btn_confirm_payment = types.InlineKeyboardButton("Confirmer le paiement", callback_data="confirm_payment")
    markup = types.InlineKeyboardMarkup().add(btn_confirm_payment)
    
    # Envoyer le message de r√©ception avec le bouton de confirmation de paiement
    bot.send_message(user_id, receipt_message, reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data == 'change_address')
def handle_change_address(call):
    # Demande au client d'entrer une nouvelle adresse
    bot.send_message(call.from_user.id, "Veuillez entrer votre nouvelle adresse de livraison :")
    bot.register_next_step_handler(call.message, process_delivery_address)



@bot.callback_query_handler(func=lambda call: call.data == 'delivery')
def handle_delivery(call):
    # Traite la r√©cup√©ration par livraison
    bot.send_message(call.from_user.id, "Vous avez choisi de vous faire livrer.")


@bot.callback_query_handler(func=lambda call: call.data == 'pickup')
def handle_pickup(call):
    # Traite la r√©cup√©ration en personne
    bot.send_message(call.from_user.id, "Vous avez choisi de r√©cup√©rer en personne.")




@bot.callback_query_handler(func=lambda call: call.data == 'clear')
def handle_clear(call):
    user_id = call.from_user.id
    clear_cart(user_id)
    bot.answer_callback_query(call.id, "Le panier a √©t√© vid√©.")


def clear_cart(user_id):
    if user_id in user_carts:
        user_carts[user_id] = {}


def get_categories():
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT categorie FROM produits")
    categories = [row[0] for row in cursor.fetchall()]
    cursor.close()
    return categories


def calculate_total_amount(user_id):
    cart_content = get_cart_content(user_id)
    total_amount = 0

    for product_name, quantity in cart_content.items():
        price = get_product_price(product_name)
        if price is not None:
            total_amount += price * quantity

    return total_amount






def get_products_by_category(category):
    cursor = conn.cursor()
    query = "SELECT nom_produit, description_produit, prix_produit FROM produits WHERE categorie = %s"
    cursor.execute(query, (category,))
    products = cursor.fetchall()
    cursor.close()
    return products



def get_product_price(product_name):
    try:
        cursor = conn.cursor()
        query = "SELECT prix_produit FROM produits WHERE nom_produit = %s"
        cursor.execute(query, (product_name,))
        price = cursor.fetchone()
        if price is not None:
            return price[0]
        else:
            return None
    except (psycopg2.Error, Exception) as error:
        print("Erreur lors de la r√©cup√©ration du prix du produit:", error)
        return None
    finally:
        cursor.close()



def handle_contactez_nous(message):
    contacts = {
        "Email": "defspsp@gmail.com",
        "Num√©ro de t√©l√©phone": "+237656958696"
    }
    
    contact_message = "Pour nous contacter :\n"
    for title, value in contacts.items():
        contact_message += f"{title}: {value}\n"
    
    # Envoie les informations de contact sans d√©sactiver le clavier
    bot.reply_to(message, contact_message)



def add_product_to_cart(user_id, product_name):
    if user_id in user_carts:
        cart = user_carts[user_id]
        if product_name in cart:
            cart[product_name] += 1
        else:
            cart[product_name] = 1
    else:
        user_carts[user_id] = {product_name: 1}


def get_cart_content(user_id):
    return user_carts.get(user_id, {})


@bot.message_handler(func=lambda message: message.text.startswith("Acheter"))
def handle_acheter(message):
    if message.text == "üõí Voir Panier":
        handle_voir_panier(message)  # Appelle directement la fonction handle_voir_panier
        return 
    # R√©cup√®re les cat√©gories de produits depuis la base de donn√©es
    categories = get_categories()

    # Cr√©e les boutons de cat√©gories
    markup = types.ReplyKeyboardMarkup(row_width=2)
    buttons = [types.KeyboardButton(category) for category in categories]

    # Ajoute le bouton "Quitter"
    buttons.append(types.KeyboardButton("Quitter"))
    buttons.append(types.KeyboardButton("üõí Voir Panier"))
    markup.add(*buttons)

    # Envoie le message avec les boutons de cat√©gories
    bot.reply_to(message, 'Veuillez s√©lectionner une cat√©gorie :', reply_markup=markup)

    # Enregistre la prochaine √©tape pour traiter la cat√©gorie s√©lectionn√©e
    bot.register_next_step_handler(message, process_selected_category)


def process_selected_category(message):
    category = message.text

    # V√©rifie si la cat√©gorie est valide en la comparant aux cat√©gories disponibles
    categories = get_categories()
    if category in categories:
        # La cat√©gorie est valide, on peut afficher les produits
        get_products_by_category(category)
    else:
        bot.send_message(message.chat.id, "Cat√©gorie invalide. Veuillez s√©lectionner une cat√©gorie valide.")


scanned_invoice_id = None

# G√®re l'action du bouton "Scanner QR code"
@bot.message_handler(func=lambda message: message.text.startswith("Scanner QR code"))
def handle_scanner_qrcode(message):
    user_id = message.from_user.id
    
    invoices = get_invoices_by_user(user_id)
    invoices_in_progress = [invoice for invoice in invoices if invoice[3] == 'en_cours']  # Remplace ['etat'] par [4]
    if invoices_in_progress:
        response = "Voici vos livraisons en cours :\n\n"
        for invoice in invoices_in_progress:
            facture_id = invoice[0]
            client_id = invoice[1]
            lieu_livraison = invoice[2]
            etat = invoice[3]
            response += f"Facture ID : {facture_id}\nClient ID : {client_id}\nLieu de livraison : {lieu_livraison}\n√âtat : {etat}\n\n"
        bot.reply_to(message, response)
        # Cr√©er les boutons "Envoyer le code" et "Prendre une photo"
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_send_code = types.InlineKeyboardButton("Envoyer le code", callback_data="send_code")
        btn_take_photo = types.InlineKeyboardButton("Prendre une photo", callback_data="take_photo")
        markup.row(btn_send_code, btn_take_photo)
        bot.reply_to(message, "Veuillez choisir une option :", reply_markup=markup)
    else:
        bot.reply_to(message, "Aucune livraison en cours.")


@bot.callback_query_handler(func=lambda call: call.data == "send_code")
def handle_send_code(call):
    message = call.message
    client_id = message.chat.id
    # Demander √† l'utilisateur d'envoyer une photo
    bot.reply_to(message, "Veuillez envoyer une photo du code QR.")
    bot.register_next_step_handler(message, check_qr_code_photo)

    # D√©finir la fonction de v√©rification de la photo
def check_qr_code_photo(message):
    user_id = message.from_user.id
    invoice_id = get_invoice_id_from_qrcode(user_id)

    if invoice_id is None:
        bot.reply_to(message, "Aucune facture en cours.")
        return

    try:
        # V√©rifie si le message a des donn√©es photo
        if message.photo:
            # R√©cup√®re les informations de la photo
            photo_info = message.photo[-1]
            photo_id = photo_info.file_id

            # R√©cup√®re la photo par son ID
            photo_file = bot.get_file(photo_id)
            photo_data = bot.download_file(photo_file.file_path)

            # Valider la photo du QR code
            if verify_qr_code_from_invoice(user_id, invoice_id, photo_data):
                set_delivery_state(invoice_id, "livree")
                bot.reply_to(message, "Le code QR correspond. La livraison a √©t√© marqu√©e comme livr√©e.")
            else:
                bot.reply_to(message, "Le code QR ne correspond pas. Veuillez r√©essayer.")
        else:
            bot.reply_to(message, "Aucune photo n'a √©t√© envoy√©e. Veuillez envoyer une photo contenant le code QR.")

    except Exception as api_exception:
        bot.reply_to(message, "Une erreur s'est produite lors du traitement de la photo. Veuillez r√©essayer.")
        print("Error while processing photo:", api_exception)

@bot.message_handler(func=lambda message: message.text == "üõí Voir Panier")
def handle_voir_panier(message):
    user_id = message.from_user.id
    cart_content = get_cart_content(user_id)
    response = "Contenu du panier :\n\n"
    if cart_content:
        total_price = 0
        for product_name, quantity in cart_content.items():
            price = get_product_price(product_name)
            if price is not None:
                item_price = price * quantity
                response += f"Produit : {product_name}\nQuantit√© : {quantity}\nPrix unitaire : {price} FCFA\nPrix total : {item_price} FCFA\n\n"
                total_price += item_price
            else:
                response += f"Produit : {product_name}\nQuantit√© : {quantity}\nPrix unitaire : Prix inconnu\n\n"
        response += f"Total : {total_price} FCFA"
        # Ajoute le bouton "Payer" en dessous du total
        btn_pay = types.InlineKeyboardButton("Payer", callback_data="pay")
        markup = types.InlineKeyboardMarkup().add(btn_pay)

        # Ajoute le bouton "Vider" √† c√¥t√© du bouton "Payer"
        btn_clear = types.InlineKeyboardButton("Vider", callback_data="clear")
        markup.row(btn_clear)

        bot.reply_to(message, response, reply_markup=markup)
    else:
        response = "Votre panier est vide."
        bot.reply_to(message, response)

def get_invoice_id_from_qrcode(client_id):
    try:
        cursor = conn.cursor()
        query = "SELECT facture_id FROM factures WHERE client_id = %s"
        cursor.execute(query, (client_id,))
        result = cursor.fetchone()
        cursor.close()

        if result:
            return result[0]  # Retourne l'ID de la facture
        else:
            return None  # Aucune facture trouv√©e pour ce client

    except (Exception, psycopg2.Error) as error:
        print("Erreur lors de la r√©cup√©ration de l'ID de la facture :", error)
        return None



@bot.callback_query_handler(func=lambda call: call.data == "take_photo")
def handle_take_photo_callback(call):
    message = call.message
    chat_id = message.chat.id

    # Ask the user to take a photo
    bot.send_message(chat_id, "Veuillez prendre une photo du QR code.")

    # Register the next step handler for processing the photo
    bot.register_next_step_handler(message, process_photo)



#def verify_cinetpay_transaction(transaction_id, site_id, apikey, expected_amount):
    #try:
       # url = "https://api-checkout.cinetpay.com/v2/payment/check"
        #headers = {'Content-Type': 'application/json'}
       # data = {
          #  "transaction_id": transaction_id,
         #   "site_id": site_id,
         #   "apikey": apikey
       # }

        #response = requests.post(url, json=data, headers=headers)
       # response_json = response.json()

        #if response_json.get("code") == "00" and response_json.get("data", {}).get("status") == "ACCEPTED":
            #actual_amount = response_json.get("data", {}).get("amount")
          #  #if actual_amount == expected_amount:
           #     return True
          #  else:
         #       print("Montant de la transaction ne correspond pas.")
        #        return False
       # else:
      #      print("Erreur lors de la v√©rification de la transaction :", response_json.get("message"))
     #       return False
    #except requests.exceptions.RequestException as e:
        #print("Erreur lors de l'appel √† l'API CinetPay :", e)
        #return False
    #except Exception as e:
        #print("Une erreur s'est produite lors de la v√©rification de la transaction :", e)
        #return False

def verify_cinetpay_transaction(transaction_id, site_id, apikey,expected_amount):
    url = "https://api-checkout.cinetpay.com/v2/payment/check"
    headers = {'Content-Type': 'application/json'}
    data = {
        "transaction_id": transaction_id,
        "site_id": site_id,
        "apikey": apikey
    }

    response = requests.post(url, json=data, headers=headers)
    response_json = response.json()

    # V√©rifier si la transaction a r√©ussi en v√©rifiant le statut dans la r√©ponse JSON
    if response_json.get("code") == "00" and response_json.get("data", {}).get("status") == "ACCEPTED":
        actual_amount = response_json.get("data", {}).get("amount")
        if actual_amount == expected_amount:
                return True
        else:
                print("Montant de la transaction ne correspond pas.")
                return False
    else:
            return False





def process_photo(message):
    if message.content_type == "photo":
        photo = message.photo[-1]  # Get the last photo sent by the user
        photo_id = photo.file_id
        client_id = message.chat.id
        # Get the photo file by its ID
        photo_file = bot.get_file(photo_id)
        photo_data = bot.download_file(photo_file.file_path)

        # Open the photo using PIL
        image = Image.open(io.BytesIO(photo_data))

        # Process the QR code in the image
        qr_code_data = decode_qr_code(image)

        if qr_code_data is not None:
            qr_code_text = qr_code_data.decode("utf-8")

            # Get the invoice ID from the QR code text
            invoice_id = qr_code_text

            # Verify the invoice and update the delivery state if the QR code is correct
            if verify_qr_code_from_invoice(client_id, invoice_id, photo_data):
                set_delivery_state(invoice_id, "livree")
                bot.reply_to(message, "Le QR code correspond. La livraison a √©t√© marqu√©e comme livr√©e.")
            else:
                bot.reply_to(message, "Le QR code ne correspond pas √† la facture en cours.")
        else:
            bot.reply_to(message, "Aucun QR code n'a √©t√© d√©tect√© dans la photo.")
    else:
        bot.reply_to(message, "Veuillez envoyer une photo contenant le QR code.")

    if message.content_type == "photo":
        photo = message.photo[-1]  # Get the last photo sent by the user
        photo_id = photo.file_id

        # Get the photo file by its ID
        photo_file = bot.get_file(photo_id)
        photo_data = bot.download_file(photo_file.file_path)

        # Open the photo using PIL
        image = Image.open(io.BytesIO(photo_data))

        # Process the QR code in the image
        qr_code_data = decode_qr_code(image)

        if qr_code_data is not None:
            qr_code_text = qr_code_data.decode("utf-8")

            # Get the invoice ID from the QR code text
            invoice_id = int(qr_code_text)

            # Verify the invoice and update the delivery state if the QR code is correct
            if invoice_id == message.chat.id :
                set_delivery_state(invoice_id, "livree")
                bot.reply_to(message, "Le QR code correspond. La livraison a √©t√© marqu√©e comme livr√©e.")
            else:
                bot.reply_to(message, "Le QR code ne correspond pas √† la facture en cours.")
        else:
            bot.reply_to(message, "Aucun QR code n'a √©t√© d√©tect√© dans la photo.")
    else:
        bot.reply_to(message, "Veuillez envoyer une photo contenant le QR code.")


def decode_qr_code(image):
    # Perform QR code decoding using the pyzbar library
    qr_code = pyzbar.decode(image)

    if qr_code:
        qr_code_data = qr_code[0].data
        return qr_code_data

    return None

def get_delivery_state(client_id):
    try:
        cursor = conn.cursor()
        query = "SELECT etat FROM etat_facture WHERE facture_id IN (SELECT facture_id FROM factures WHERE client_id = %s)"
        cursor.execute(query, (client_id,))
        result = cursor.fetchone()
        cursor.close()

        if result:
            return result[0]  # Renvoie l'√©tat de livraison
        else:
            return None  # Aucun r√©sultat trouv√© pour le client ID donn√©
    except (Exception, psycopg2.Error) as error:
        print("Erreur lors de la r√©cup√©ration de l'√©tat de livraison:", error)
        return None



def verify_qr_code_from_invoice(client_id, invoice_id, image_path):
    try:
        # Charger l'image contenant le code QR
        image = Image.open(image_path)

        # D√©coder le code QR de l'image
        decoded_qr_codes = pyzbar.decode(image)

        # V√©rifier si le code QR correspond √† la facture associ√©e √† l'ID du client
        for qr_code in decoded_qr_codes:
            qr_code_data = qr_code.data.decode('utf-8')

            # V√©rifier si le code QR contient l'ID du client et l'ID de la facture
            if f"Facture_ID:{invoice_id},Client_ID:{client_id}" in qr_code_data:
                return True

        # Si aucun code QR valide n'est trouv√©
        return False

    except Exception as error:
        print("Erreur lors de la v√©rification du code QR :", error)
        return False



def get_invoices_by_user(user_id):
    try:
        cursor = conn.cursor()
        query = """
        SELECT f.facture_id, f.client_id, f.lieu_livraison, ef.etat
        FROM factures f
        INNER JOIN etat_facture ef ON f.facture_id = ef.facture_id
        WHERE f.client_id = %s AND ef.etat = 'en_cours'
        """
        values = (user_id,)
        cursor.execute(query, values)
        invoices = cursor.fetchall()
        cursor.close()
        return invoices
    except (Exception, psycopg2.Error) as error:
        print("Une erreur s'est produite lors de la r√©cup√©ration des factures :", error)
        return []



def set_delivery_state(facture_id, etat):
    try:
        cursor = conn.cursor()
        query = "UPDATE etat_facture SET etat = %s WHERE facture_id = %s"
        values = (etat, facture_id)
        cursor.execute(query, values)
        conn.commit()
        cursor.close()
        return True
    except (Exception, psycopg2.Error) as error:
        print("Erreur lors de la mise √† jour de l'√©tat de livraison :", error)
        return False


def confirm_delivery(invoice_id):
    try:
        cursor = conn.cursor()
        query = "UPDATE etat_facture SET etat = 'En cours' WHERE facture_id = %s"
        cursor.execute(query, (invoice_id,))
        conn.commit()
        cursor.close()
    except (Exception, psycopg2.Error) as error:
        print("Erreur lors de la confirmation de la livraison :", error)


def get_product_images(product_name):
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT pi.image FROM produits p INNER JOIN produits_image pi ON p.produit_id = pi.produit_id WHERE p.nom_produit = %s", (product_name,))
        images = cursor.fetchall()
        cursor.close()

        base_path = r"C:/Users/Public/images"  # Chemin de base de votre serveur local
    except (Exception, psycopg2.Error) as error:
        print("erreur lors de la recuperation de l'image du produit:", error)

    return [os.path.join(base_path, image[0]) for image in images]

def send_product_images(chat_id, images):
    for image in images:
        with open(image, 'rb') as photo:
            bot.send_photo(chat_id, photo)

try:
    while True:
        bot.polling(none_stop=True)
except KeyboardInterrupt:
    print("Arr√™t du bot suite √† une interruption manuelle.")
except Exception as e:
    print("Une erreur s'est produite lors de l'ex√©cution du bot :", e)

